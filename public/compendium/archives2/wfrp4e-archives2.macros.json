{
	"label": "Макросы (Archives Vol. II)",
	"entries": {
		"Generate Magical Armour": {
			"name": "Создать магическую броню",
			"command": "let regex = /\\[(.+?)\\]/gm\n    let armourTable = game.wfrp4e.tables.findTable(\"magical-armour\")\n    let armourResult = (await armourTable.roll()).results[0]\n\n    let uuids = Array.from(armourResult.text.matchAll(regex)).map(match => match[1])\n    let items = (await Promise.all(uuids.map(fromUuid))).map(i => i.toObject())\n\n    let sizeSpeciesTable =  game.wfrp4e.tables.findTable(\"armour-size\", \"species\")\n    let sizeHeightTable =  game.wfrp4e.tables.findTable(\"armour-size\", \"height\")\n\n    let sizeSpecies = (await sizeSpeciesTable.roll()).results[0].text\n    let sizeHeight = (await sizeHeightTable.roll()).results[0].text\n\n    let qualityTable = game.wfrp4e.tables.findTable(\"armour-qualities\")\n    let qualityRolls = 1;\n    let qualityResults = [];\n    \n    while (qualityRolls >= 1)\n    {\n        let result = (await qualityTable.roll()).results[0]\n        \n        if (!qualityResults.find(r => r._id == result._id))\n        {\n            qualityRolls--;\n            qualityResults.push(result)\n            if (result._id == \"xBg0E3YfpQABR5io\")\n            {\n                qualityRolls += 2\n            }\n        }\n    }\ndebugger\n    for(let item of items)\n    {\n        item.name = \"Magical \" + item.name\n        item.system.description.value = `<p><strong>Fit</strong>: ${sizeHeight} ${sizeSpecies}</p>`\n        item.system.description.value += qualityResults.map(i => i.text).join(\"\")\n\n    item.effects = qualityResults.map(i => game.wfrp4e.config.artefactEffects[i.id]).reduce((prev, current) => prev.concat(current?.filter(i => i.label)), []).filter(i => i)\n    let changes = qualityResults.map(i => game.wfrp4e.config.artefactEffects[i.id]).reduce((prev, current) => prev.concat(current?.filter(i => i.change)), []).filter(i => i)\n        \n        game.wfrp4e.utility.log(\"Changes\", undefined, changes)\n        for(let change of changes)\n        {\n            let func = new Function(\"item\", change.change)        \n            func(item)\n        }\n    for (let effect of item.effects)\n        effect.icon = item.img\n    }\n    items.forEach(i => delete i._id)\n    Item.createDocuments(items, {renderSheet: true})",
			"description": "<p></p>"
		},
		"Generate Magical Shield": {
			"name": "Создать магический щит",
			"command": "let typeTable = game.wfrp4e.tables.findTable(\"magical-shield\")\n    let qualityTable = game.wfrp4e.tables.findTable(\"shield-qualities\")\n\n    let type = (await typeTable.roll()).results[0]\n    let item = (await game.wfrp4e.utility.findItemId(type.documentId)).toObject()\n\n    let quality = (await qualityTable.roll()).results[0];\n\n\n    \n    item.effects = game.wfrp4e.config.artefactEffects[quality.id]?.filter(i => i.name) || []\n    let changes  = game.wfrp4e.config.artefactEffects[quality.id]?.filter(i => i.change) || []\n        \n    game.wfrp4e.utility.log(\"Changes\", undefined, changes)\n    for(let change of changes)\n    {\n        let func = new Function(\"item\", change.change)        \n        func(item)\n    }\n    for (let effect of item.effects)\n        effect.icon = item.img\n\n\n    let regex = /(<.+?>)/gm;\n    let text = quality.text;\n    Array.from(text.matchAll(regex)).forEach(match => {\n        text = text.replace(match[0], \"\")\n    })\n\n    item.name = text.split(\":\")[0].trim()\n\n\n    item.system.description.value = quality.text\n    delete item._id\n    Item.implementation.create(item, { renderSheet: true })",
			"description": "<p></p>"
		},
		"Generate Magical Staff": {
			"name": "Создать магический посох",
			"command": "let staff = (await fromUuid(\"Compendium.wfrp4e-core.items.GkeMJrsqxQIek1xK\")).toObject();\nlet loreTable = game.wfrp4e.tables.findTable(\"scroll\", \"lore\")\nlet quirkTable = game.wfrp4e.tables.findTable(\"quirks-curses\");\n\nlet lore = \"\"\ndo {\n    lore = (await loreTable.roll()).results[0].text\n    lore = Array.from(lore.matchAll(/{(.+?)}/gm))[0][1]\n} while (lore == \"Petty\" || lore == \"Arcane\");\n\nlet quirk = \"\"\nif ([\"Hedgecraft\", \"Witchcraft\", \"Necromancy\", \"Daemonology\"].includes(lore) || lore.includes(\"Chaos Magic\")) {\n    do {\n        quirk = (await game.wfrp4e.tables.rollTable(\"quirks-curses\", { modifier: 40 })).result\n    } while (quirk.includes(\"runes\"))\n}\n\nif (lore.includes(\"Chaos Magic\")) {\n    lore = [\"Tzeentch\", \"Nurgle\", \"Slaanesh\", \"Undivided\"][Math.floor(CONFIG.Dice.randomUniform() * 4)]\n}\n\nstaff.name = \"Staff of \" + lore;\n\nif (quirk) {\n    staff.system.description.value = quirk;\n}\n\nlet effect = {\n    name: staff.name,\n    icon: staff.img,\n    flags: {\n        wfrp4e: {\n            \"effectTrigger\": \"prepareItem\",\n            \"effectApplication\": \"equipped\",\n            \"script\": `\n                if (args.item.type == \"spell\" && game.wfrp4e.config.magicLores[args.item.system.lore.value] == \"${lore}\")\n                {\n                    args.item.system.cn.value -= 1\n                }\n            `\n        }\n    }\n}\n\nstaff.effects.push(effect);\n\ndelete staff._id;\nItem.implementation.create(staff, { renderSheet: true });",
			"description": "<p></p>"
		},
		"Generate Magical Weapon": {
			"name": "Создать магическое оружие",
			"command": "let typeTable = game.wfrp4e.tables.findTable(\"magic-weapons\")\n    let qualityTable = game.wfrp4e.tables.findTable(\"weapon-qualities\")\n    let historyTable = game.wfrp4e.tables.findTable(\"magical-history\")\n\n    let type = (await typeTable.roll()).results[0]\n debugger\n    let qualityRolls = 1;\n    let historyRolls = 1\n\n    let historyResults = [];\n    let qualityResults = [];\n\n    while (qualityRolls >= 1) {\n        let result = (await qualityTable.roll()).results[0]\n\n        if (!qualityResults.find(r => r._id == result._id)) {\n            qualityRolls--;\n            qualityResults.push(result)\n            if (result._id == \"C0hC2OTmBrFKgORm\") {\n                qualityRolls += 2\n            }\n        }\n    }\n\n    while (historyRolls >= 1) {\n        let result = (await historyTable.roll()).results[0]\n\n        if (!historyResults.find(r => r._id == result._id)) {\n            historyRolls--;\n            historyResults.push(result)\n            if (result._id == \"C0hC2OTmBrFKgORm\") {\n                historyRolls += 2\n            }\n        }\n    }\n\n    let item = (await game.wfrp4e.utility.findItemId(type.documentId)).toObject()\n\n    item.effects = qualityResults.map(i => game.wfrp4e.config.artefactEffects[i.id]).reduce((prev, current) => prev.concat(current?.filter(i => i.name)), []).filter(i => i)\n    let changes = qualityResults.map(i => game.wfrp4e.config.artefactEffects[i.id]).reduce((prev, current) => prev.concat(current?.filter(i => i.change)), []).filter(i => i)\n    \n    game.wfrp4e.utility.log(\"Changes\", undefined, changes)\n    for(let change of changes)\n    {\n        let func = new Function(\"item\", change.change)        \n        func(item)\n    }\n    for (let effect of item.effects)\n        effect.icon = item.img\n\n    item.system.description.value = qualityResults.map(i => i.text).join(\"\")\n    item.system.gmdescription.value = historyResults.map(i => i.text).join(\"\");\n    delete item._id\n    Item.implementation.create(item, { renderSheet: true })",
			"description": "<p></p>"
		},
		"Generate Spell Scroll": {
			"name": "Создать свиток заклинания",
			"command": "let spells = await game.wfrp4e.utility.findAll(\"spell\")\n\n    let cnIndex = new Array(13).fill(undefined).map(i => [])\n\n    for(let spell of spells)\n    {\n        if (spell.system.cn.value <= 12)\n        {\n            cnIndex[spell.system.cn.value].push(spell)\n        }\n    }\n\n    let cnTable = game.wfrp4e.tables.findTable(\"scroll\", \"cn\")\n    let loreTable = game.wfrp4e.tables.findTable(\"scroll\", \"lore\")\n\n    let cn = Number((await cnTable.roll()).results[0].text)\n\n    let lore = (await loreTable.roll()).results[0].text\n\n    lore = Array.from(lore.matchAll(/{(.+?)}/gm))[0][1]\n\n    if (lore.includes(\"Chaos Magic\"))\n    {\n        lore = [\"Tzeentch\", \"Nurgle\", \"Slaanesh\", \"Undivided\"][Math.floor(CONFIG.Dice.randomUniform() * 4)]\n    }\n\n    let spellsWithLore = []\n    let searchCN = cn\n    while (spellsWithLore.length == 0)\n    {\n        let spellsWithCN = cnIndex[searchCN]\n        if (lore == \"Arcane\")\n        {\n            spellsWithLore = spellsWithCN.filter(i => !i.system.lore.value)\n        }\n        else \n            spellsWithLore = spellsWithCN.filter(i => game.wfrp4e.config.magicLores[i.system.lore.value] == lore)\n\n        if (searchCN == 0)\n            break;\n        else searchCN--\n    }\n\n\n    if (spellsWithLore.length > 0)\n    {\n        let selectedSpell = spellsWithLore[Math.floor(CONFIG.Dice.randomUniform() * spellsWithLore.length)]\n        let item = Item.implementation.create(\n            {\n                type : \"trapping\", \n                name : \"Scroll of \" + selectedSpell.name, \n                img : selectedSpell.img,\n                system : {\n                    trappingType : {\n                        value : \"booksAndDocuments\",\n                    },\n                    description : {\n                        value : `<p>@UUID[${selectedSpell.uuid}]</p>`\n                    }\n                }}, {renderSheet : true})\n    }\n    else \n    {\n        ui.notifications.notify(`Could not find ${lore} spell: CN ${cn} or lower. Try Again`)\n    }",
			"description": "<p></p>"
		}
	}
}
